{
    "type": [
        2,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.1.1 (2021-08-10) -- \"Kick Things\"\nCopyright (C) 2021 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "library(tidyverse)",
        "\u001B[37m-- \u001B[1mAttaching packages\u001B[22m --------------------------------------------- tidyverse 1.3.1 --\u001B[39m\n",
        "\u001B[37m\u001B[32mv\u001B[37m \u001B[34mggplot2\u001B[37m 3.3.5     \u001B[32mv\u001B[37m \u001B[34mpurrr  \u001B[37m 0.3.4\n\u001B[32mv\u001B[37m \u001B[34mtibble \u001B[37m 3.1.4     \u001B[32mv\u001B[37m \u001B[34mdplyr  \u001B[37m 1.0.7\n\u001B[32mv\u001B[37m \u001B[34mtidyr  \u001B[37m 1.1.3     \u001B[32mv\u001B[37m \u001B[34mstringr\u001B[37m 1.4.0\n\u001B[32mv\u001B[37m \u001B[34mreadr  \u001B[37m 2.0.1     \u001B[32mv\u001B[37m \u001B[34mforcats\u001B[37m 0.5.1\u001B[39m\n",
        "\u001B[37m-- \u001B[1mConflicts\u001B[22m ------------------------------------------------ tidyverse_conflicts() --\n\u001B[31mx\u001B[37m \u001B[34mdplyr\u001B[37m::\u001B[32mfilter()\u001B[37m masks \u001B[34mstats\u001B[37m::filter()\n\u001B[31mx\u001B[37m \u001B[34mdplyr\u001B[37m::\u001B[32mlag()\u001B[37m    masks \u001B[34mstats\u001B[37m::lag()\u001B[39m\n",
        "> ",
        "athletes <- read_csv('atheletes.csv')",
        "Error: 'atheletes.csv' does not exist in current working directory ('C:/Users/emmyu/OneDrive/Documents/R/R projects/exam_portfolio').\n",
        "> ",
        "athletes <- read_csv('athletes.csv')",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mathletes.csv\u001B[0m [=====---------------------------------------------] \u001B[32m?\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mathletes.csv\u001B[0m [=========================================] \u001B[32m252.95MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                         \r\u001B[1m\u001B[1mRows: \u001B[1m\u001B[22m\u001B[34m\u001B[34m141857\u001B[34m\u001B[39m \u001B[1m\u001B[1mColumns: \u001B[1m\u001B[22m\u001B[34m\u001B[34m1\u001B[34m\u001B[39m\n\u001B[36m--\u001B[39m \u001B[1m\u001B[1mColumn specification\u001B[1m\u001B[22m \u001B[36m--------------------------------------------------------------\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[31mchr\u001B[39m (1): athlete;name;sex;born;died;affiliations;title;measurements\n",
        "\n\u001B[36mi\u001B[39m Use \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`spec()`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to retrieve the full column specification for this data.\n\u001B[36mi\u001B[39m Specify the column types or set \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`show_col_types = FALSE`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to quiet this message.\n",
        "> ",
        "view(athletes)",
        "Warning in View :\n  One or more parsing issues, see `problems()` for details\n",
        "> ",
        "athletes <- read_csv('athletes.csv', header = TRUE, sep = '\\t')",
        "Error in read_csv(\"athletes.csv\", header = TRUE, sep = \"\\t\") : \n  unused arguments (header = TRUE, sep = \"\\t\")\n",
        "> ",
        "View(athletes)",
        "> ",
        "games <- read.table(file = 'games.tsv', sep = '\\t', header = TRUE)",
        "Warning messages:\n",
        "1: ",
        "In scan(file = file, what = what, sep = sep, quote = quote, dec = dec,  :",
        "\n ",
        " EOF within quoted string\n",
        "2: ",
        "In scan(file = file, what = what, sep = sep, quote = quote, dec = dec,  :",
        "\n ",
        " number of items read is not a multiple of the number of columns\n",
        "> ",
        "knitr::opts_chunk$set(warning = FALSE, message = FALSE)",
        "> ",
        "games <- read.table(file = 'games.tsv', sep = '\\t', header = TRUE)",
        "Warning messages:\n",
        "1: ",
        "In scan(file = file, what = what, sep = sep, quote = quote, dec = dec,  :",
        "\n ",
        " EOF within quoted string\n",
        "2: ",
        "In scan(file = file, what = what, sep = sep, quote = quote, dec = dec,  :",
        "\n ",
        " number of items read is not a multiple of the number of columns\n",
        "> ",
        "view(games)",
        "> ",
        "results <- read_csv('results.csv')",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mresults.csv\u001B[0m [=--------------------------------------------------] \u001B[32m?\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mresults.csv\u001B[0m [==========================================] \u001B[32m146.51MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                         \r\r                                                                                                                         \r\u001B[1m\u001B[1mRows: \u001B[1m\u001B[22m\u001B[34m\u001B[34m291710\u001B[34m\u001B[39m \u001B[1m\u001B[1mColumns: \u001B[1m\u001B[22m\u001B[34m\u001B[34m10\u001B[34m\u001B[39m\n",
        "\u001B[36m--\u001B[39m \u001B[1m\u001B[1mColumn specification\u001B[1m\u001B[22m \u001B[36m--------------------------------------------------------------\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[31mchr\u001B[39m (7): season, sport, discipline, medal, country, country_code, team\n\u001B[32mdbl\u001B[39m (3): athlete, year, pos\n\n\u001B[36mi\u001B[39m Use \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`spec()`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to retrieve the full column specification for this data.\n\u001B[36mi\u001B[39m Specify the column types or set \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`show_col_types = FALSE`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to quiet this message.\n",
        "> ",
        "view(results)",
        "> ",
        "athletes <- read_csv('athletes.csv', sep = '|')",
        "Error in read_csv(\"athletes.csv\", sep = \"|\") : \n  unused argument (sep = \"|\")\n",
        "> ",
        "athletes <- read_csv('athletes.csv', sep = ',')",
        "Error in read_csv(\"athletes.csv\", sep = \",\") : \n  unused argument (sep = \",\")\n",
        "> ",
        "athletes <- read_csv('athletes.csv')",
        "\r\u001B[1mindexing\u001B[0m \u001B[34mathletes.csv\u001B[0m [=======-------------------------------------------] \u001B[32m?\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r\u001B[1mindexing\u001B[0m \u001B[34mathletes.csv\u001B[0m [=========================================] \u001B[32m333.23MB/s\u001B[0m, eta: \u001B[36m 0s\u001B[0m\r                                                                                                                         \r\u001B[1m\u001B[1mRows: \u001B[1m\u001B[22m\u001B[34m\u001B[34m141857\u001B[34m\u001B[39m \u001B[1m\u001B[1mColumns: \u001B[1m\u001B[22m\u001B[34m\u001B[34m1\u001B[34m\u001B[39m\n\u001B[36m--\u001B[39m \u001B[1m\u001B[1mColumn specification\u001B[1m\u001B[22m \u001B[36m--------------------------------------------------------------\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[31mchr\u001B[39m (1): athlete;name;sex;born;died;affiliations;title;measurements\n",
        "\n\u001B[36mi\u001B[39m Use \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`spec()`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to retrieve the full column specification for this data.\n\u001B[36mi\u001B[39m Specify the column types or set \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`show_col_types = FALSE`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to quiet this message.\n",
        "> ",
        "knitr::opts_chunk$set(warning=FALSE, message = FALSE)",
        "> ",
        "library(tidyverse)",
        "Warning message:\n",
        "One or more parsing issues, see `problems()` for details \n",
        "> ",
        "bibrary(lubridate)",
        "Error in bibrary(lubridate) : could not find function \"bibrary\"\n",
        "> ",
        "library(lubridate)",
        "\nAttaching package: ‘lubridate’\n\n",
        "The following objects are masked from ‘package:base’:\n\n    date, intersect, setdiff, union\n\n",
        "> ",
        "results <- read_csv(File = 'results.csv)",
        "Error: Incomplete expression: results <- read_csv(File = 'results.csv)\n",
        "> ",
        "results <- read_csv(File = 'results.csv')",
        "Error in read_csv(File = \"results.csv\") : \n  unused argument (File = \"results.csv\")\n",
        "> ",
        "results <- read_csv('results.csv')",
        "\u001B[1m\u001B[1mRows: \u001B[1m\u001B[22m\u001B[34m\u001B[34m291710\u001B[34m\u001B[39m \u001B[1m\u001B[1mColumns: \u001B[1m\u001B[22m\u001B[34m\u001B[34m10\u001B[34m\u001B[39m\n\u001B[36m--\u001B[39m \u001B[1m\u001B[1mColumn specification\u001B[1m\u001B[22m \u001B[36m-------------------------------------------------------\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[31mchr\u001B[39m (7): season, sport, discipline, medal, country, country_code, team\n\u001B[32mdbl\u001B[39m (3): athlete, year, pos\n\n\u001B[36mi\u001B[39m Use \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`spec()`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to retrieve the full column specification for this data.\n\u001B[36mi\u001B[39m Specify the column types or set \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`show_col_types = FALSE`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to quiet this message.\n",
        "> ",
        "results <- read_csv(file = 'results.csv')",
        "\u001B[1m\u001B[1mRows: \u001B[1m\u001B[22m\u001B[34m\u001B[34m291710\u001B[34m\u001B[39m \u001B[1m\u001B[1mColumns: \u001B[1m\u001B[22m\u001B[34m\u001B[34m10\u001B[34m\u001B[39m\n\u001B[36m--\u001B[39m \u001B[1m\u001B[1mColumn specification\u001B[1m\u001B[22m \u001B[36m-------------------------------------------------------\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[31mchr\u001B[39m (7): season, sport, discipline, medal, country, country_code, team\n\u001B[32mdbl\u001B[39m (3): athlete, year, pos\n\n\u001B[36mi\u001B[39m Use \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`spec()`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to retrieve the full column specification for this data.\n\u001B[36mi\u001B[39m Specify the column types or set \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`show_col_types = FALSE`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to quiet this message.\n",
        "> ",
        "results <- read_csv(file = 'results.csv')",
        "\u001B[1m\u001B[1mRows: \u001B[1m\u001B[22m\u001B[34m\u001B[34m291710\u001B[34m\u001B[39m \u001B[1m\u001B[1mColumns: \u001B[1m\u001B[22m\u001B[34m\u001B[34m10\u001B[34m\u001B[39m\n\u001B[36m--\u001B[39m \u001B[1m\u001B[1mColumn specification\u001B[1m\u001B[22m \u001B[36m-------------------------------------------------------\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[31mchr\u001B[39m (7): season, sport, discipline, medal, country, country_code, team\n\u001B[32mdbl\u001B[39m (3): athlete, year, pos\n\n\u001B[36mi\u001B[39m Use \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`spec()`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to retrieve the full column specification for this data.\n\u001B[36mi\u001B[39m Specify the column types or set \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`show_col_types = FALSE`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to quiet this message.\n",
        "> ",
        "ggplot(results, aes(country))",
        "> ",
        "results <- read_csv(file = 'results.csv')",
        "\u001B[1m\u001B[1mRows: \u001B[1m\u001B[22m\u001B[34m\u001B[34m291710\u001B[34m\u001B[39m \u001B[1m\u001B[1mColumns: \u001B[1m\u001B[22m\u001B[34m\u001B[34m10\u001B[34m\u001B[39m\n\u001B[36m--\u001B[39m \u001B[1m\u001B[1mColumn specification\u001B[1m\u001B[22m \u001B[36m-------------------------------------------------------\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[31mchr\u001B[39m (7): season, sport, discipline, medal, country, country_code, team\n\u001B[32mdbl\u001B[39m (3): athlete, year, pos\n\n\u001B[36mi\u001B[39m Use \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`spec()`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to retrieve the full column specification for this data.\n\u001B[36mi\u001B[39m Specify the column types or set \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`show_col_types = FALSE`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to quiet this message.\n",
        "> ",
        "ggplot(results, aes(country)) +geom_bar()",
        "> ",
        "dfnew <- filter(results, country(1.10))",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `country(1.1)`.\n\u001B[31mx\u001B[39m could not find function \"country\"\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "dfnew <- filter(results, country(1:10))",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `country(1:10)`.\n\u001B[31mx\u001B[39m could not find function \"country\"\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "dfnew <- filter(results, country[1:10])",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `country[1:10]`.\n\u001B[31mx\u001B[39m Input `..1` must be of size 291710 or 1, not size 10.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "ggplot(results, aes(country, fill = country)) +geom_bar(",
        "+ ",
        "results <- read_csv(file = 'results.csv')",
        "+ ",
        "ggplot(results, aes(country, fill = country)) +geom_bar(",
        "Error: unexpected symbol in:\n\"results <- read_csv(file = 'results.csv')\nggplot\"\n",
        "> ",
        "ggplot(results, aes(country, fill = country)) +geom_bar()",
        "> ",
        "ggplot(results, aes(country, color = country)) +geom_bar()",
        "> ",
        "ggplot(results, aes(country)) +geom_bar()",
        "> ",
        "#ggplot(results, aes(country)) +geom_bar()",
        "> ",
        "nrow(filter(results, n_country %in% country))",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `n_country %in% country`.\n\u001B[31mx\u001B[39m object 'n_country' not found\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "#ggplot(results, aes(country)) +geom_bar()",
        "> ",
        "nrow(filter(results, country %in% country))",
        "[1] 291710\n",
        "> ",
        "#ggplot(results, aes(country)) +geom_bar()",
        "> ",
        "nrow(filter(results, country == 'Nigeria))",
        "+ ",
        "#ggplot(results, aes(country)) +geom_bar()",
        "+ ",
        "nrow(filter(results, country == 'Nigeria'))",
        "Error: unexpected symbol in:\n\"#ggplot(results, aes(country)) +geom_bar()\nnrow(filter(results, country == 'Nigeria\"\n",
        "> ",
        "#ggplot(results, aes(country)) +geom_bar()",
        "> ",
        "count(results, 'country')",
        "> ",
        "#ggplot(results, aes(country)) +geom_bar()",
        "> ",
        "count(results, 'Nigeria' %in% country)",
        "> ",
        "#ggplot(results, aes(country)) +geom_bar()",
        "> ",
        "count(results, filter('Nigeria' %in% country))",
        "Error: Problem adding computed columns in `group_by()`.\n\u001B[31mx\u001B[39m Problem with `mutate()` input `..1`.\n\u001B[34mi\u001B[39m `..1 = filter(\"Nigeria\" %in% country)`.\n\u001B[31mx\u001B[39m no applicable method for 'filter' applied to an object of class \"logical\"\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "#ggplot(results, aes(country)) +geom_bar()",
        "> ",
        "df <- c(results, filter('Nigeria' %in% country))",
        "Error in \"Nigeria\" %in% country : object 'country' not found\n",
        "> ",
        "filter(results, country == 'Nigeria)",
        "+ ",
        "filter(results, country == 'Nigeria')",
        "Error: unexpected symbol in:\n\"filter(results, country == 'Nigeria)\nfilter(results, country == 'Nigeria\"\n",
        "> ",
        "filter(results, country == 'Nigeria')",
        "> ",
        "filter(results, country == 'Nigeria')",
        "> ",
        "df <- c(results, filter('Nigeria' %in% c))",
        "Error in match(x, table, nomatch = 0L) : \n  'match' requires vector arguments\n",
        "> ",
        "results %>% filter( country, count(country))",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `country`.\n\u001B[31mx\u001B[39m Input `..1` must be a logical vector, not a character.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% filter(results, country)",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `results`.\n\u001B[31mx\u001B[39m Input `..1$athlete` must be a logical vector, not a double.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% filter(results, count(country))",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `results`.\n\u001B[31mx\u001B[39m Input `..1$athlete` must be a logical vector, not a double.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% filter(results, count(country))",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `results`.\n\u001B[31mx\u001B[39m Input `..1$athlete` must be a logical vector, not a double.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% filter(.data, count(country))",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `.data`.\n\u001B[31mx\u001B[39m Input must be a vector, not a <rlang_data_pronoun> object.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% filter(.data, countr",
        "+ ",
        "results %>% filter(.data, country)",
        "Error: unexpected symbol in:\n\"results %>% filter(.data, countr\nresults\"\n",
        "> ",
        "results %>% filter(.data, country)",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `.data`.\n\u001B[31mx\u001B[39m Input must be a vector, not a <rlang_data_pronoun> object.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% count(country)",
        "> ",
        "results %>% count(country)%>%",
        "+ ",
        "  summarise(results, country_1 = count(country))",
        "Error: Problem with `summarise()` column `country_1`.\n\u001B[34mi\u001B[39m `country_1 = count(country)`.\n\u001B[31mx\u001B[39m no applicable method for 'count' applied to an object of class \"character\"\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% count(country)%>%",
        "+ ",
        "  summarise(results, country = count(country))",
        "Error: Problem with `summarise()` column `country`.\n\u001B[34mi\u001B[39m `country = count(country)`.\n\u001B[31mx\u001B[39m no applicable method for 'count' applied to an object of class \"character\"\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% count(country)%>%",
        "+ ",
        "  summarise(results, country = count(country, na.rm = TRUE))",
        "Error: Problem with `summarise()` column `country`.\n\u001B[34mi\u001B[39m `country = count(country, na.rm = TRUE)`.\n\u001B[31mx\u001B[39m no applicable method for 'count' applied to an object of class \"character\"\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results <- read_csv(file = 'results.csv')",
        "\u001B[1m\u001B[1mRows: \u001B[1m\u001B[22m\u001B[34m\u001B[34m291710\u001B[34m\u001B[39m \u001B[1m\u001B[1mColumns: \u001B[1m\u001B[22m\u001B[34m\u001B[34m10\u001B[34m\u001B[39m\n\u001B[36m--\u001B[39m \u001B[1m\u001B[1mColumn specification\u001B[1m\u001B[22m \u001B[36m-------------------------------------------------------\u001B[39m\n\u001B[1mDelimiter:\u001B[22m \",\"\n\u001B[31mchr\u001B[39m (7): season, sport, discipline, medal, country, country_code, team\n\u001B[32mdbl\u001B[39m (3): athlete, year, pos\n\n\u001B[36mi\u001B[39m Use \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`spec()`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to retrieve the full column specification for this data.\n\u001B[36mi\u001B[39m Specify the column types or set \u001B[38;5;251m\u001B[48;5;235m\u001B[38;5;251m\u001B[48;5;235m`show_col_types = FALSE`\u001B[48;5;235m\u001B[38;5;251m\u001B[49m\u001B[39m to quiet this message.\n",
        "> ",
        "",
        "> ",
        "#results %>% count(country)%>%",
        "> ",
        "result <- results%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  summarise(count = n())",
        "> ",
        "View(result)",
        "> ",
        "result %>% filter(result, count > 438)",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `result`.\n\u001B[31mx\u001B[39m Input `..1$country` must be a logical vector, not a character.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "result <- filter(result, count > 438)",
        "> ",
        "View(result)",
        "> ",
        "result_10 <- filter(result, count > 1000)",
        "> ",
        "result_10 <- filter(result, count > 2000)",
        "> ",
        "result_10 <- filter(result, count > 4000)",
        "> ",
        "result_10 <- filter(result, count > 6000)",
        "> ",
        "View(result_10)",
        "> ",
        "result_10 <- filter(result, count > 7000)",
        "> ",
        "View(result_10)",
        "> ",
        "#results %>% count(country)%>%",
        "> ",
        "result <- results%>%",
        "+ ",
        "  group_by(count)%>%",
        "+ ",
        "  summarise(count = n())",
        "Error: Must group by variables found in `.data`.\n* Column `count` is not found.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "#results %>% count(country)%>%",
        "> ",
        "result <- results%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  summarise(count = n())",
        "> ",
        "result_10 <- group_by(count) %>%",
        "+ ",
        "  filter(result, count > 7000)",
        "Error in UseMethod(\"group_by\") : \n  no applicable method for 'group_by' applied to an object of class \"function\"\n",
        "> ",
        "result_10 <- result %>%",
        "+ ",
        "  group_by(count) %>%",
        "+ ",
        "  filter(result, count > 7000)",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `result`.\n\u001B[31mx\u001B[39m Input `..1` must be of size 1, not size 229.\n\u001B[34mi\u001B[39m The error occurred in group 1: count = 3.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "result_10 <- result %>%",
        "+ ",
        "  group_by(count) %>%",
        "+ ",
        "  filter( count > 7000)",
        "> ",
        "View(result_10)",
        "> ",
        "result_new <- result %>%",
        "+ ",
        "  group_by(count) %>%",
        "+ ",
        "  filter( count > 7000)",
        "> ",
        "View(result_new)",
        "> ",
        "result_new <- result %>%",
        "+ ",
        "  group_by(count) %>%",
        "+ ",
        "  filter( count > 7000)%>%",
        "+ ",
        "  arange(desc(count))",
        "Error in arange(., desc(count)) : could not find function \"arange\"\n",
        "> ",
        "result_new <- result %>%",
        "+ ",
        "  group_by(count) %>%",
        "+ ",
        "  filter( count > 7000)%>%",
        "+ ",
        "  arrange(desc(count))",
        "> ",
        "View(result_new)",
        "> ",
        "result_new <- result %>%",
        "+ ",
        "  group_by(count) %>%",
        "+ ",
        "  filter( count = max(count))%>%",
        "+ ",
        "  arrange(desc(count))",
        "Error: Problem with `filter()` input `..1`.\n\u001B[31mx\u001B[39m Input `..1` is named.\n\u001B[34mi\u001B[39m This usually means that you've used `=` instead of `==`.\n\u001B[34mi\u001B[39m Did you mean `count == max(count)`?\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "result_new <- result %>%",
        "+ ",
        "  group_by(count) %>%",
        "+ ",
        "  filter( count == max(count))%>%",
        "+ ",
        "  arrange(desc(count))",
        "> ",
        "result_new <- result %>%",
        "+ ",
        "  group_by(count) %>%",
        "+ ",
        "  filter( count > 7000)%>%",
        "+ ",
        "  arrange(desc(count))",
        "> ",
        "result_new <- result %>%",
        "+ ",
        "  ",
        "+ ",
        "  filter( count > 7000)%>%",
        "+ ",
        "  arrange(desc(count))",
        "> ",
        "#results %>% count(country)%>%",
        "> ",
        "result <- results%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  summarise(count = n()) %>%",
        "+ ",
        "  filter(count > 7000) %>%",
        "+ ",
        "  arrange(desc(count))",
        "> ",
        "View(result)",
        "> ",
        "#results %>% count(country)%>%",
        "> ",
        "result <- results%>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  summarise(count = n()) %>%",
        "+ ",
        "  filter(count > 7000) %>%",
        "+ ",
        "  arrange(desc(count))",
        "> ",
        "#results %>% count(country)%>%",
        "> ",
        "result <- results%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  summarise(count = n()) %>%",
        "+ ",
        "  filter(count > 7000) %>%",
        "+ ",
        "  arrange(desc(count))",
        "> ",
        "#results %>% count(country)%>%",
        "> ",
        "result <- results%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  summarise(count = n()) %>%",
        "+ ",
        "  #filter(count > 7000) %>%",
        "+ ",
        "  arrange(desc(count))",
        "> ",
        "#results %>% count(country)%>%",
        "> ",
        "result <- results%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  summarise(count = n()) %>%",
        "+ ",
        "  #filter(count > 7000) %>%",
        "+ ",
        "  select(count(1:9))",
        "Error: no applicable method for 'count' applied to an object of class \"c('integer', 'numeric')\"\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "#results %>% count(country)%>%",
        "> ",
        "result <- results%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  summarise(count = n()) %>%",
        "+ ",
        "  #filter(count > 7000) %>%",
        "+ ",
        "  filter(count.length >9)",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `count.length > 9`.\n\u001B[31mx\u001B[39m object 'count.length' not found\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "#results %>% count(country)%>%",
        "> ",
        "result <- results%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  summarise(count = n()) %>%",
        "+ ",
        "  #filter(count > 7000) %>%",
        "+ ",
        "  ",
        "+ ",
        "  arrange(desc(count))",
        "> ",
        "result %>% filter(count.length > 10)",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `count.length > 10`.\n\u001B[31mx\u001B[39m object 'count.length' not found\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "result %>% slice(1:10)",
        "> ",
        "#results %>% count(country)%>%",
        "> ",
        "result <- results%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  summarise(count = n()) %>%",
        "+ ",
        "  #filter(count > 7000) %>%",
        "+ ",
        "  slice(1:10) %>%",
        "+ ",
        "  arrange(desc(count))",
        "> ",
        "#results %>% count(country)%>%",
        "> ",
        "resul <- results%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  summarise(count = n()) %>%",
        "+ ",
        "  #filter(count > 7000) %>%",
        "+ ",
        "  slice(1:10) %>%",
        "+ ",
        "  arrange(desc(count))",
        "> ",
        "#results %>% count(country)%>%",
        "> ",
        "result_10 <- results%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  summarise(count = n()) %>%",
        "+ ",
        "  #filter(count > 7000) %>%",
        "+ ",
        "  slice(1:10) %>%",
        "+ ",
        "  arrange(desc(count))",
        "> ",
        "View(result_10)",
        "> ",
        "View(resul)",
        "> ",
        "#results %>% count(country)%>%",
        "> ",
        "result_10 <- results%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  summarise(count = n()) %>%",
        "+ ",
        "  #filter(count > 7000) %>%",
        "+ ",
        "  ",
        "+ ",
        "  arrange(desc(count))%>%",
        "+ ",
        "  slice(1:10)",
        "> ",
        "View(result_10)",
        "> ",
        "results %>% count(country)",
        "> ",
        "result_all %>% count(country)",
        "Error in count(., country) : object 'result_all' not found\n",
        "> ",
        "result_all >- result %>% count(country)",
        "Error: object 'result_all' not found\n",
        "> ",
        "result_all <- result %>% count(country)",
        "> ",
        "View(result_all)",
        "> ",
        "result_all <- results %>% count(country)",
        "> ",
        "View(result_all)",
        "> ",
        "View(result_all)",
        "> ",
        "result_all <- results %>% count(country) %>%",
        "+ ",
        "  summarise(count(n))",
        "Error: Problem with `summarise()` input `..1`.\n\u001B[34mi\u001B[39m `..1 = count(n)`.\n\u001B[31mx\u001B[39m no applicable method for 'count' applied to an object of class \"c('integer', 'numeric')\"\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "result_all <- results %>% count(country) %>%",
        "+ ",
        "  summarise(count(country))",
        "Error: Problem with `summarise()` input `..1`.\n\u001B[34mi\u001B[39m `..1 = count(country)`.\n\u001B[31mx\u001B[39m no applicable method for 'count' applied to an object of class \"character\"\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "result_all <- results %>% count(country)",
        "> ",
        "results %>% count('Germany')",
        "> ",
        "results %>% count('Germany')%>%",
        "+ ",
        "  group_by(country)",
        "Error: Must group by variables found in `.data`.\n* Column `country` is not found.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% count(contry)%>%",
        "+ ",
        "  group_by(country)",
        "Error: Must group by variables found in `.data`.\n* Column `contry` is not found.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% count(country)%>%",
        "+ ",
        "  group_by(country)",
        "> ",
        "results %>% count(country)%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  mutate('Germany')",
        "> ",
        "results %>% count(country)%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  filter('Germany')",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `\"Germany\"`.\n\u001B[31mx\u001B[39m Input `..1` must be a logical vector, not a character.\n\u001B[34mi\u001B[39m The error occurred in group 1: country = \"Afghanistan\".\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% count(country)%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  filter(country = 'Germany')",
        "Error: Problem with `filter()` input `..1`.\n\u001B[31mx\u001B[39m Input `..1` is named.\n\u001B[34mi\u001B[39m This usually means that you've used `=` instead of `==`.\n\u001B[34mi\u001B[39m Did you mean `country == \"Germany\"`?\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% count(country)%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  filter(country == 'Germany')",
        "> ",
        "results %>% count(country)%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  filter(country == 'Germany' & season == 'Winter')",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `country == \"Germany\" & season == \"Winter\"`.\n\u001B[31mx\u001B[39m object 'season' not found\n\u001B[34mi\u001B[39m The error occurred in group 1: country = \"Afghanistan\".\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% count(country)%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  select(country,season)",
        "Error: Can't subset columns that don't exist.\n\u001B[31mx\u001B[39m Column `season` doesn't exist.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "  #filter(country == 'Germany' & season == 'Winter')",
        "> ",
        "view(results)",
        "> ",
        "results %>% count(country)%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  select(results, country,season)",
        "Note: Using an external vector in selections is ambiguous.\n\u001B[34mi\u001B[39m Use `all_of(results)` instead of `results` to silence this message.\n\u001B[34mi\u001B[39m See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n\u001B[90mThis message is displayed once per session.\u001B[39m\n",
        "Error: Must subset columns with a valid subscript vector.\n\u001B[31mx\u001B[39m Subscript has the wrong type `spec_tbl_df<\n  athlete     : double\n  year        : double\n  season      : character\n  sport       : character\n  discipline  : character\n  pos         : double\n  medal       : character\n  country     : character\n  country_code: character\n  team        : character\n>`.\n\u001B[34mi\u001B[39m It must be numeric or character.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% count(country)%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  select(country,season)",
        "Error: Can't subset columns that don't exist.\n\u001B[31mx\u001B[39m Column `season` doesn't exist.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>% count(country)%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  select(season)",
        "Error: Can't subset columns that don't exist.\n\u001B[31mx\u001B[39m Column `season` doesn't exist.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  select(season)",
        "Adding missing grouping variables: `country`\n",
        "> ",
        "results %>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  select(season =='Winter')",
        "Error: object 'season' not found\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  #select(season =='Winter')",
        "+ ",
        "  filter(country == 'Germany' & season == 'Winter')",
        "> ",
        "results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) &>&",
        "Error: unexpected '>' in:\n\"  #group_by(country)%>%\n  select(country,season) &>\"\n",
        "> ",
        "results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == 'Germany' & season == 'Winter')",
        "> ",
        "dfNew <- results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == 'Germany' & season == 'Winter')",
        "> ",
        "View(dfNew)",
        "> ",
        "dfNew <- results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == 'Germany' & season == 'Winter')%>%",
        "+ ",
        "  summarise(count =n())",
        "> ",
        "View(dfNew)",
        "> ",
        "dfNew <- results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == 'Germany' & season == 'Winter')%>%",
        "+ ",
        "  summarise(count =n())",
        "> ",
        "results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == 'Germany' & season == 'Winter')",
        "> ",
        "results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == 'Germany' & season == 'Winter')%>%",
        "+ ",
        "  summarise(count = n())",
        "> ",
        "results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == 'Germany West' & season == 'Winter')%>%",
        "+ ",
        "  summarise(count = n())",
        "> ",
        "results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == 'Germany' & season == 'Winter')%>%",
        "+ ",
        "  summarise(count = n())",
        "> ",
        "results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == 'West Germany' & season == 'Winter')%>%",
        "+ ",
        "  summarise(count = n())",
        "> ",
        "results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == 'East Germany' & season == 'Winter')%>%",
        "+ ",
        "  summarise(count = n())",
        "> ",
        "results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == 'Germany' & season == 'Winter')%>%",
        "+ ",
        "  summarise(count = n())",
        "> ",
        "results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == 'Germany'|'West Germany' & season == 'Winter')%>%",
        "+ ",
        "  summarise(count = n())",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `country == \"Germany\" | \"West Germany\" & season == \"Winter\"`.\n\u001B[31mx\u001B[39m operations are possible only for numeric, logical or complex types\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == ('Germany'|'West Germany') & season == 'Winter')%>%",
        "+ ",
        "  summarise(count = n())",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `country == (\"Germany\" | \"West Germany\") & season == \"Winter\"`.\n\u001B[31mx\u001B[39m operations are possible only for numeric, logical or complex types\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == ('Germany'||'West Germany') & season == 'Winter')%>%",
        "+ ",
        "  summarise(count = n())",
        "Error: Problem with `filter()` input `..1`.\n\u001B[34mi\u001B[39m Input `..1` is `country == (\"Germany\" || \"West Germany\") & season == \"Winter\"`.\n\u001B[31mx\u001B[39m invalid 'x' type in 'x || y'\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "results %>%",
        "+ ",
        "  #group_by(country)%>%",
        "+ ",
        "  select(country,season) %>%",
        "+ ",
        "  filter(country == ('Germany' or 'West Germany') & season == 'Winter')%>%",
        "Error: unexpected symbol in:\n\"  select(country,season) %>%\n  filter(country == ('Germany' or\"\n",
        "> ",
        "germany_country <- results.join('Germany', 'West Geramany','East Germany')",
        "Error in results.join(\"Germany\", \"West Geramany\", \"East Germany\") : \n  could not find function \"results.join\"\n",
        "> ",
        "germany_country <- results(country)%>%",
        "+ ",
        "  summarise_all(funs(trimws(paste(., collapse = ''))))",
        "Error in results(country) : could not find function \"results\"\n",
        "> ",
        "germany_country <- results%>%",
        "+ ",
        "  group_by(country)%>%",
        "+ ",
        "  summarise_all(funs(trimws(paste(., collapse = ''))))",
        "> ",
        "View(germany_country)",
        "> ",
        "View(germany_country)",
        "> ",
        "View(germany_country)",
        "> ",
        "View(germany_country)",
        "\nRestarting R session...\n\n"
    ]
}